@font-face{font-family:'Roboto Mono';src:url(../fonts/robotomono-regular-webfont.woff) format("woff")}body{margin:0;padding:0;-webkit-box-sizing:border-box;box-sizing:border-box;color:#fff;color:#fefefe;font-family:sans-serif;overflow:hidden;-webkit-transition:background 2s cubic-bezier(0,0,1,-.1);transition:background 2s cubic-bezier(0,0,1,-.1);background:#1a1304;background:-webkit-radial-gradient(103vw 2vh circle,#1c9df3 0,#3498db 4%,#217dbb 7%,#18425e 15%,#0c161d 30%,#1a1304 95%);background:radial-gradient(circle at 103vw 2vh,#1c9df3 0,#3498db 4%,#217dbb 7%,#18425e 15%,#0c161d 30%,#1a1304 95%);-webkit-box-shadow:inset #1a1304 0 0 4vw;box-shadow:inset #1a1304 0 0 4vw}body.ignorance{background:-webkit-radial-gradient(103vw 2vh circle,#1c51f3 0,#345ddb 4%,#2147bb 7%,#18295e 15%,#0c161d 30%,#1a1304 95%);background:radial-gradient(circle at 103vw 2vh,#1c51f3 0,#345ddb 4%,#2147bb 7%,#18295e 15%,#0c161d 30%,#1a1304 95%)}body.ideas{background:-webkit-radial-gradient(103vw 2vh circle,#331cf3 0,#4634db 4%,#3221bb 7%,#1f185e 15%,#0c161d 30%,#1a1304 95%);background:radial-gradient(circle at 103vw 2vh,#331cf3 0,#4634db 4%,#3221bb 7%,#1f185e 15%,#0c161d 30%,#1a1304 95%)}body.justice{background:-webkit-radial-gradient(103vw 2vh circle,#7f1cf3 0,#8134db 4%,#6821bb 7%,#38185e 15%,#0c161d 30%,#1a1304 95%);background:radial-gradient(circle at 103vw 2vh,#7f1cf3 0,#8134db 4%,#6821bb 7%,#38185e 15%,#0c161d 30%,#1a1304 95%)}body.violence{background:-webkit-radial-gradient(103vw 2vh circle,#cb1cf3 0,#bc34db 4%,#9e21bb 7%,#51185e 15%,#0c161d 30%,#1a1304 95%);background:radial-gradient(circle at 103vw 2vh,#cb1cf3 0,#bc34db 4%,#9e21bb 7%,#51185e 15%,#0c161d 30%,#1a1304 95%)}body.nature{background:-webkit-radial-gradient(103vw 2vh circle,#f31ccf 0,#db34bf 4%,#bb21a1 7%,#5e1853 15%,#0c161d 30%,#1a1304 95%);background:radial-gradient(circle at 103vw 2vh,#f31ccf 0,#db34bf 4%,#bb21a1 7%,#5e1853 15%,#0c161d 30%,#1a1304 95%)}body.epistemology{background:-webkit-radial-gradient(103vw 2vh circle,#f31c83 0,#db3484 4%,#bb216b 7%,#5e183a 15%,#0c161d 30%,#1a1304 95%);background:radial-gradient(circle at 103vw 2vh,#f31c83 0,#db3484 4%,#bb216b 7%,#5e183a 15%,#0c161d 30%,#1a1304 95%)}body.will{background:-webkit-radial-gradient(103vw 2vh circle,#f31c38 0,#db3449 4%,#bb2135 7%,#5e1821 15%,#0c161d 30%,#1a1304 95%);background:radial-gradient(circle at 103vw 2vh,#f31c38 0,#db3449 4%,#bb2135 7%,#5e1821 15%,#0c161d 30%,#1a1304 95%)}body.power{background:-webkit-radial-gradient(103vw 2vh circle,#f34c1c 0,#db5a34 4%,#bb4421 7%,#5e2818 15%,#0c161d 30%,#1a1304 95%);background:radial-gradient(circle at 103vw 2vh,#f34c1c 0,#db5a34 4%,#bb4421 7%,#5e2818 15%,#0c161d 30%,#1a1304 95%)}body.be{background:-webkit-radial-gradient(103vw 2vh circle,#f3981c 0,#db9434 4%,#bb7a21 7%,#5e4018 15%,#0c161d 30%,#1a1304 95%);background:radial-gradient(circle at 103vw 2vh,#f3981c 0,#db9434 4%,#bb7a21 7%,#5e4018 15%,#0c161d 30%,#1a1304 95%)}body.liberty{background:-webkit-radial-gradient(103vw 2vh circle,#f3e41c 0,#dbcf34 4%,#bbb021 7%,#5e5918 15%,#0c161d 30%,#1a1304 95%);background:radial-gradient(circle at 103vw 2vh,#f3e41c 0,#dbcf34 4%,#bbb021 7%,#5e5918 15%,#0c161d 30%,#1a1304 95%)}body.physics{background:-webkit-radial-gradient(103vw 2vh circle,#b6f31c 0,#acdb34 4%,#8fbb21 7%,#4a5e18 15%,#0c161d 30%,#1a1304 95%);background:radial-gradient(circle at 103vw 2vh,#b6f31c 0,#acdb34 4%,#8fbb21 7%,#4a5e18 15%,#0c161d 30%,#1a1304 95%)}body.isolation{background:-webkit-radial-gradient(103vw 2vh circle,#6af31c 0,#71db34 4%,#59bb21 7%,#315e18 15%,#0c161d 30%,#1a1304 95%);background:radial-gradient(circle at 103vw 2vh,#6af31c 0,#71db34 4%,#59bb21 7%,#315e18 15%,#0c161d 30%,#1a1304 95%)}body.brain{background:-webkit-radial-gradient(103vw 2vh circle,#1ef31c 0,#36db34 4%,#23bb21 7%,#185e18 15%,#0c161d 30%,#1a1304 95%);background:radial-gradient(circle at 103vw 2vh,#1ef31c 0,#36db34 4%,#23bb21 7%,#185e18 15%,#0c161d 30%,#1a1304 95%)}body.cosmology{background:-webkit-radial-gradient(103vw 2vh circle,#1cf366 0,#34db6d 4%,#21bb56 7%,#185e30 15%,#0c161d 30%,#1a1304 95%);background:radial-gradient(circle at 103vw 2vh,#1cf366 0,#34db6d 4%,#21bb56 7%,#185e30 15%,#0c161d 30%,#1a1304 95%)}body.religion{background:-webkit-radial-gradient(103vw 2vh circle,#1cf3b1 0,#34dba8 4%,#21bb8c 7%,#185e49 15%,#0c161d 30%,#1a1304 95%);background:radial-gradient(circle at 103vw 2vh,#1cf3b1 0,#34dba8 4%,#21bb8c 7%,#185e49 15%,#0c161d 30%,#1a1304 95%)}body.intelligence{background:-webkit-radial-gradient(103vw 2vh circle,#1ce9f3 0,#34d3db 4%,#21b3bb 7%,#185b5e 15%,#0c161d 30%,#1a1304 95%);background:radial-gradient(circle at 103vw 2vh,#1ce9f3 0,#34d3db 4%,#21b3bb 7%,#185b5e 15%,#0c161d 30%,#1a1304 95%)}#quote_table tbody tr td.quote date.ignorance{color:#345ddb}body.ignorance #timer-bar #current-theme .theme{text-shadow:1px 1px 0 #122664}#quote_table tbody tr td.quote date.ideas{color:#4634db}body.ideas #timer-bar #current-theme .theme{text-shadow:1px 1px 0 #1b1264}#quote_table tbody tr td.quote date.justice{color:#8134db}body.justice #timer-bar #current-theme .theme{text-shadow:1px 1px 0 #381264}#quote_table tbody tr td.quote date.violence{color:#bc34db}body.violence #timer-bar #current-theme .theme{text-shadow:1px 1px 0 #551264}#quote_table tbody tr td.quote date.nature{color:#db34bf}body.nature #timer-bar #current-theme .theme{text-shadow:1px 1px 0 #641257}#quote_table tbody tr td.quote date.epistemology{color:#db3484}body.epistemology #timer-bar #current-theme .theme{text-shadow:1px 1px 0 #641239}#quote_table tbody tr td.quote date.will{color:#db3449}body.will #timer-bar #current-theme .theme{text-shadow:1px 1px 0 #64121c}#quote_table tbody tr td.quote date.power{color:#db5a34}body.power #timer-bar #current-theme .theme{text-shadow:1px 1px 0 #642412}#quote_table tbody tr td.quote date.be{color:#db9434}body.be #timer-bar #current-theme .theme{text-shadow:1px 1px 0 #644112}#quote_table tbody tr td.quote date.liberty{color:#dbcf34}body.liberty #timer-bar #current-theme .theme{text-shadow:1px 1px 0 #645f12}#quote_table tbody tr td.quote date.physics{color:#acdb34}body.physics #timer-bar #current-theme .theme{text-shadow:1px 1px 0 #4d6412}#quote_table tbody tr td.quote date.isolation{color:#71db34}body.isolation #timer-bar #current-theme .theme{text-shadow:1px 1px 0 #306412}#quote_table tbody tr td.quote date.brain{color:#36db34}body.brain #timer-bar #current-theme .theme{text-shadow:1px 1px 0 #136412}#quote_table tbody tr td.quote date.cosmology{color:#34db6d}body.cosmology #timer-bar #current-theme .theme{text-shadow:1px 1px 0 #12642e}#quote_table tbody tr td.quote date.religion{color:#34dba8}body.religion #timer-bar #current-theme .theme{text-shadow:1px 1px 0 #12644b}.viewport{position:relative;display:block;height:100%;max-height:100%;margin:0;background-image:url(../img/broken-noise.png);background-repeat:repeat}@media (max-width:37.5em){.viewport{width:90%;padding:0 10% 0 0}}@media (min-width:37.5em){.viewport{width:80%;padding:0 20% 0 0}}@media (min-width:50em){.viewport{width:70%;padding:0 30% 0 0}}@media (min-width:64em){.viewport{width:70%;padding:0 30% 0 0}}#loader{position:absolute;top:50%;left:50%;width:120px;height:30px;margin-top:-15px;margin-left:-60px;fill:#000;z-index:1}#loader span#progess-bar{display:block;position:relative;width:0;height:100%;background-color:#333;-webkit-clip-path:url(#svgPath);clip-path:url(#svgPath)}#loader.active span#progess-bar{-webkit-animation-name:grow;animation-name:grow;-webkit-animation-duration:.75s;animation-duration:.75s;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite}@-webkit-keyframes grow{0%{width:0}100%{width:100%}}@keyframes grow{0%{width:0}100%{width:100%}}#timer-bar{position:absolute;top:0;bottom:0;right:0}@media (max-width:37.5em){#timer-bar{width:9.8%}}@media (min-width:50em){#timer-bar{width:29.8%}}@media (min-width:64em){#timer-bar{width:29.8%}}#timer-bar #quotes-count,#timer-bar .progress-circle{position:absolute;right:8px;bottom:8px}#timer-bar #current-theme{display:block;position:absolute;top:0;right:0;width:70vh;letter-spacing:3px;float:left;text-transform:uppercase;text-align:right;-webkit-transform:rotate(-90deg);-ms-transform:rotate(-90deg);transform:rotate(-90deg);-webkit-transform-origin:right bottom 0;-ms-transform-origin:right bottom 0;transform-origin:right bottom 0;-webkit-animation:disappear 1s linear;animation:disappear 1s linear;-webkit-animation-iteration-count:1;animation-iteration-count:1}@media (max-width:37.5em){#timer-bar #current-theme{height:35px;font-size:1em;line-height:1em}}@media (min-width:50em){#timer-bar #current-theme{height:60px;font-size:1.5em;line-height:1.5em}}@media (min-width:64em){#timer-bar #current-theme{height:90px;font-size:2em;line-height:3em}}#timer-bar #current-theme .theme{position:absolute;width:100%}#timer-bar #current-theme.glitched .theme:nth-child(1){-webkit-animation:disappear .25s linear,noise_1 .2s linear;animation:disappear .25s linear,noise_1 .2s linear;-webkit-animation-iteration-count:3;animation-iteration-count:3}#timer-bar #current-theme.glitched .theme:nth-child(2){top:1px;left:1px;color:rgba(0,0,255,.8);z-index:-1;-webkit-animation:animate_glitch_2 .25s linear,noise_3 .5s linear;animation:animate_glitch_2 .25s linear,noise_3 .5s linear;-webkit-animation-iteration-count:3;animation-iteration-count:3}#timer-bar #current-theme.glitched .theme:nth-child(3){top:-1px;left:-1px;color:rgba(255,0,0,.6);z-index:-1;-webkit-animation:animate_glitch_1 .25s linear,noise_3 .5s linear;animation:animate_glitch_1 .25s linear,noise_3 .5s linear;-webkit-animation-iteration-count:3;animation-iteration-count:3}#timer-bar #quotes-count{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;z-index:5;font-family:sans-serif;text-align:center;color:#3e3e3c;border-radius:50%;border:1px solid rgba(229,236,251,.05)}@media (max-width:37.5em){#timer-bar #quotes-count{width:30px;height:30px;margin:1px;line-height:30px;font-size:.5em}}@media (min-width:37.5em){#timer-bar #quotes-count{width:40px;height:40px;line-height:40px}}@media (min-width:50em){#timer-bar #quotes-count{width:40px;height:40px;margin:2px;line-height:40px;font-size:.8em}}@media (min-width:64em){#timer-bar #quotes-count{width:60px;height:60px;margin:4px;line-height:60px;font-size:1em}}#timer-bar #quotes-count span.index,#timer-bar #quotes-count span.total{position:relative;width:50%;line-height:inherit;height:inherit;text-align:inherit;color:#196090}#timer-bar svg.progress-circle{display:block;margin:-1px;fill:transparent;stroke:#3498db;stroke-width:4px;stroke-dasharray:204.24;stroke-dashoffset:204.24;z-index:1;border:1px solid rgba(229,236,251,.05)}@media (max-width:37.5em){#timer-bar svg.progress-circle{width:35px;height:35px;border-radius:35px}}@media (min-width:37.5em){#timer-bar svg.progress-circle{width:40px;height:40px;border-radius:40px}}@media (min-width:50em){#timer-bar svg.progress-circle{width:50px;height:50px;border-radius:50px}}@media (min-width:64em){#timer-bar svg.progress-circle{width:70px;height:70px;border-radius:70px}}@-webkit-keyframes disappear{0%{opacity:0}2%{opacity:1}}@keyframes disappear{0%{opacity:0}2%{opacity:1}}@-webkit-keyframes animate_glitch_1{0%{top:1px;left:1px}25%{top:3px;left:2px}50%{top:-1px;left:-4px}75%{top:2px;left:5px}100%{top:1px;left:-2px}}@keyframes animate_glitch_1{0%{top:1px;left:1px}25%{top:3px;left:2px}50%{top:-1px;left:-4px}75%{top:2px;left:5px}100%{top:1px;left:-2px}}@-webkit-keyframes animate_glitch_2{0%{top:-1px;left:-1px}25%{top:-3px;left:-2px}50%{top:1px;left:4px}100%{top:-1px;left:-1px}}@keyframes animate_glitch_2{0%{top:-1px;left:-1px}25%{top:-3px;left:-2px}50%{top:1px;left:4px}100%{top:-1px;left:-1px}}@-webkit-keyframes noise-1{0%,20%,40%,60%,70%,90%{opacity:0}10%{opacity:.1}50%{opacity:.5;left:-6px}80%{opacity:.3}100%{opacity:.6;left:2px}}@keyframes noise-1{0%,20%,40%,60%,70%,90%{opacity:0}10%{opacity:.1}50%{opacity:.5;left:-6px}80%{opacity:.3}100%{opacity:.6;left:2px}}@-webkit-keyframes noise_1{0%,100%,3%,42%,44%,5%{opacity:1;-webkit-transform:scaleY(1);transform:scaleY(1)}4.3%{opacity:1;-webkit-transform:scaleY(1.7);transform:scaleY(1.7)}43%{opacity:1;-webkit-transform:scaleX(1.5);transform:scaleX(1.5)}}@keyframes noise_1{0%,100%,3%,42%,44%,5%{opacity:1;-webkit-transform:scaleY(1);transform:scaleY(1)}4.3%{opacity:1;-webkit-transform:scaleY(1.7);transform:scaleY(1.7)}43%{opacity:1;-webkit-transform:scaleX(1.5);transform:scaleX(1.5)}}@-webkit-keyframes noise_2{0%,20%,40%,60%,70%,90%{opacity:0}10%{opacity:.1}50%{opacity:.5;left:6px}80%{opacity:.3}100%{opacity:.6;left:-2px}}@keyframes noise_2{0%,20%,40%,60%,70%,90%{opacity:0}10%{opacity:.1}50%{opacity:.5;left:6px}80%{opacity:.3}100%{opacity:.6;left:-2px}}@-webkit-keyframes noise_3{0%,100%,3%,42%,44%,5%{opacity:1;-webkit-transform:scaleY(1);transform:scaleY(1)}4.3%{opacity:1;-webkit-transform:scaleY(4);transform:scaleY(4)}43%{opacity:1;-webkit-transform:scaleX(10) rotate(60deg);transform:scaleX(10) rotate(60deg)}}@keyframes noise_3{0%,100%,3%,42%,44%,5%{opacity:1;-webkit-transform:scaleY(1);transform:scaleY(1)}4.3%{opacity:1;-webkit-transform:scaleY(4);transform:scaleY(4)}43%{opacity:1;-webkit-transform:scaleX(10) rotate(60deg);transform:scaleX(10) rotate(60deg)}}#auto-scroll{position:absolute;width:inherit;bottom:0;z-index:10}@media (max-width:37.5em){#auto-scroll{width:84%;margin-left:8px}}@media (min-width:50em){#auto-scroll{width:70%;border-left:1px solid rgba(229,236,251,.05)}}@media (min-width:64em){#auto-scroll{width:60%;border-left:1px solid rgba(229,236,251,.05)}}#auto-scroll table#quote_table{display:table;border:0;border-collapse:collapse;font-size:18px;line-height:32px;font-family:"Roboto Mono",monospace;letter-spacing:1px;font-weight:100;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;white-space:pre-line}#auto-scroll table#quote_table tbody tr{display:table}#auto-scroll table#quote_table tbody tr td{display:table-cell;vertical-align:top}#auto-scroll table#quote_table tbody tr td.quote{position:relative}#auto-scroll table#quote_table tbody tr td.quote author{color:#ccc;margin-left:.5em}#auto-scroll table#quote_table .line_count{display:block;color:rgba(52,152,219,.3);margin-right:1em;padding-right:1em;text-align:right;border-right:1px solid rgba(52,152,219,.3)}@media (min-width:64em){#auto-scroll table#quote_table .line_count{min-width:80px}}@media (max-width:37.5em){#auto-scroll table#quote_table .line_count{display:none}}@media (min-width:50em){#auto-scroll table#quote_table .line_count{min-width:40px}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
